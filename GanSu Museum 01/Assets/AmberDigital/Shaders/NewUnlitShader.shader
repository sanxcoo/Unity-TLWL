Shader "Amber Shader/NewUnlitShader"
{
	Properties
	{
		_MainTex ("Texture", 2D) = "white" {}
		_MainColor("Color", Color) = (1,1,1,1)

		_PassID("Pass", Int) = 0

		//[HideInInspector]
		//_Gussian1("", Vector) = (0.000118,0.010631,0.000118,0)
		//_Gussian2("", Vector) = (0.010631,0.957002,0.010631,0)
		//_Gussian3("", Vector) = (0.000118,0.010631,0.000118,0)
	}
	SubShader
	{
		Tags { "RenderType"="Overlay" "Queue" = "Transparent" }
		LOD 100

		Cull Off
		ZWrite Off
		ZTest Always
		Blend SrcAlpha OneMinusSrcAlpha
		Lighting Off

		Pass
		{
			CGPROGRAM
			// Upgrade NOTE: excluded shader from DX11, Xbox360, OpenGL ES 2.0 because it uses unsized arrays
			//#pragma exclude_renderers d3d11 xbox360 gles
			#pragma target 3.0
			#pragma vertex vert
			//#pragma fragment frag
			#pragma fragment frag_accessor

			// make fog work
			//#pragma multi_compile_fog
			
			#include "UnityCG.cginc"

			struct appdata
			{
				float4 vertex : POSITION;
				float2 uv : TEXCOORD0;
			};

			struct v2f
			{
				float2 uv : TEXCOORD0;
				//UNITY_FOG_COORDS(1)
				float4 vertex : SV_POSITION;
			};

			sampler2D _MainTex;
			float4 _MainTex_ST;
			float4 _MainTex_TexelSize;
			float4 _MainColor;
			float  _PassID;

			static const float gussian1[9] = { 0.000118,0.010631,0.000118,
											  0.010631,0.957002,0.010631,
											  0.000118,0.010631,0.000118 };

			static const float gussian2[25] = { 0.000044,0.001291,0.003976,0.001291,0.000044,
												0.001291,0.037724,0.116197,0.037724,0.001291,
												0.003976,0.116197,0.357911,0.116197,0.003976,
												0.001291,0.037724,0.116197,0.037724,0.001291,
												0.000044,0.001291,0.003976,0.001291,0.000044 };

			static const float gussian5[121] = { 0.000007082,0.000035788,0.000126167,0.000310320,0.000532511,0.000637531,0.000532511,0.000310320,0.000126167,0.000035788,0.000007082,
				0.000035788,0.000180838,0.000637531,0.001568073,0.002690824,0.003221501,0.002690824,0.001568073,0.000637531,0.000180838,0.000035788,
				0.000126167,0.000637531,0.002247565,0.005528118,0.009486289,0.011357150,0.009486289,0.005528118,0.002247565,0.000637531,0.000126167,
				0.000310320,0.001568073,0.005528118,0.013596980,0.023332510,0.027934080,0.023332510,0.013596980,0.005528118,0.001568073,0.000310320,
				0.000532511,0.002690824,0.009486289,0.023332510,0.040038740,0.047935080,0.040038740,0.023332510,0.009486289,0.002690824,0.000532511,
				0.000637531,0.003221501,0.011357150,0.027934080,0.047935080,0.057388710,0.047935080,0.027934080,0.011357150,0.003221501,0.000637531,
				0.000532511,0.002690824,0.009486289,0.023332510,0.040038740,0.047935080,0.040038740,0.023332510,0.009486289,0.002690824,0.000532511,
				0.000310320,0.001568073,0.005528118,0.013596980,0.023332510,0.027934080,0.023332510,0.013596980,0.005528118,0.001568073,0.000310320,
				0.000126167,0.000637531,0.002247565,0.005528118,0.009486289,0.011357150,0.009486289,0.005528118,0.002247565,0.000637531,0.000126167,
				0.000035788,0.000180838,0.000637531,0.001568073,0.002690824,0.003221501,0.002690824,0.001568073,0.000637531,0.000180838,0.000035788,
				0.000007082,0.000035788,0.000126167,0.000310320,0.000532511,0.000637531,0.000532511,0.000310320,0.000126167,0.000035788,0.000007082 };

			static const float gussian10[441] = { 0.000001773,0.000004170,0.000008961,0.000017599,0.000031590,0.000051823,0.000077698,0.000106466,0.000133330,0.000152601,0.000159625,0.000152601,0.000133330,0.000106466,0.000077698,0.000051823,0.000031590,0.000017599,0.000008961,0.000004170,0.000001773,
				0.000004170,0.000009804,0.000021070,0.000041381,0.000074279,0.000121854,0.000182697,0.000250342,0.000313509,0.000358822,0.000375338,0.000358822,0.000313509,0.000250342,0.000182697,0.000121854,0.000074279,0.000041381,0.000021070,0.000009804,0.000004170,
				0.000008961,0.000021070,0.000045278,0.000088928,0.000159625,0.000261864,0.000392614,0.000537983,0.000673728,0.000771107,0.000806599,0.000771107,0.000673728,0.000537983,0.000392614,0.000261864,0.000159625,0.000088928,0.000045278,0.000021070,0.000008961,
				0.000017599,0.000041381,0.000088928,0.000174657,0.000313509,0.000514310,0.000771107,0.001056616,0.001323225,0.001514479,0.001584187,0.001514479,0.001323225,0.001056616,0.000771107,0.000514310,0.000313509,0.000174657,0.000088928,0.000041381,0.000017599,
				0.000031590,0.000074279,0.000159625,0.000313509,0.000562745,0.000923182,0.001384130,0.001896617,0.002375176,0.002718476,0.002843602,0.002718476,0.002375176,0.001896617,0.001384130,0.000923182,0.000562745,0.000313509,0.000159625,0.000074279,0.000031590,
				0.000051823,0.000121854,0.000261864,0.000514310,0.000923182,0.001514479,0.002270662,0.003111396,0.003896472,0.004459656,0.004664924,0.004459656,0.003896472,0.003111396,0.002270662,0.001514479,0.000923182,0.000514310,0.000261864,0.000121854,0.000051823,
				0.000077698,0.000182697,0.000392614,0.000771107,0.001384130,0.002270662,0.003404410,0.004664924,0.005841990,0.006686373,0.006994133,0.006686373,0.005841990,0.004664924,0.003404410,0.002270662,0.001384130,0.000771107,0.000392614,0.000182697,0.000077698,
				0.000106466,0.000250342,0.000537983,0.001056616,0.001896617,0.003111396,0.004664924,0.006392156,0.008005042,0.009162066,0.009583776,0.009162066,0.008005042,0.006392156,0.004664924,0.003111396,0.001896617,0.001056616,0.000537983,0.000250342,0.000106466,
				0.000133330,0.000313509,0.000673728,0.001323225,0.002375176,0.003896472,0.005841990,0.008005042,0.010024900,0.011473860,0.012001980,0.011473860,0.010024900,0.008005042,0.005841990,0.003896472,0.002375176,0.001323225,0.000673728,0.000313509,0.000133330,
				0.000152601,0.000358822,0.000771107,0.001514479,0.002718476,0.004459656,0.006686373,0.009162066,0.011473860,0.013132260,0.013736710,0.013132260,0.011473860,0.009162066,0.006686373,0.004459656,0.002718476,0.001514479,0.000771107,0.000358822,0.000152601,
				0.000159625,0.000375338,0.000806599,0.001584187,0.002843602,0.004664924,0.006994133,0.009583776,0.012001980,0.013736710,0.014368980,0.013736710,0.012001980,0.009583776,0.006994133,0.004664924,0.002843602,0.001584187,0.000806599,0.000375338,0.000159625,
				0.000152601,0.000358822,0.000771107,0.001514479,0.002718476,0.004459656,0.006686373,0.009162066,0.011473860,0.013132260,0.013736710,0.013132260,0.011473860,0.009162066,0.006686373,0.004459656,0.002718476,0.001514479,0.000771107,0.000358822,0.000152601,
				0.000133330,0.000313509,0.000673728,0.001323225,0.002375176,0.003896472,0.005841990,0.008005042,0.010024900,0.011473860,0.012001980,0.011473860,0.010024900,0.008005042,0.005841990,0.003896472,0.002375176,0.001323225,0.000673728,0.000313509,0.000133330,
				0.000106466,0.000250342,0.000537983,0.001056616,0.001896617,0.003111396,0.004664924,0.006392156,0.008005042,0.009162066,0.009583776,0.009162066,0.008005042,0.006392156,0.004664924,0.003111396,0.001896617,0.001056616,0.000537983,0.000250342,0.000106466,
				0.000077698,0.000182697,0.000392614,0.000771107,0.001384130,0.002270662,0.003404410,0.004664924,0.005841990,0.006686373,0.006994133,0.006686373,0.005841990,0.004664924,0.003404410,0.002270662,0.001384130,0.000771107,0.000392614,0.000182697,0.000077698,
				0.000051823,0.000121854,0.000261864,0.000514310,0.000923182,0.001514479,0.002270662,0.003111396,0.003896472,0.004459656,0.004664924,0.004459656,0.003896472,0.003111396,0.002270662,0.001514479,0.000923182,0.000514310,0.000261864,0.000121854,0.000051823,
				0.000031590,0.000074279,0.000159625,0.000313509,0.000562745,0.000923182,0.001384130,0.001896617,0.002375176,0.002718476,0.002843602,0.002718476,0.002375176,0.001896617,0.001384130,0.000923182,0.000562745,0.000313509,0.000159625,0.000074279,0.000031590,
				0.000017599,0.000041381,0.000088928,0.000174657,0.000313509,0.000514310,0.000771107,0.001056616,0.001323225,0.001514479,0.001584187,0.001514479,0.001323225,0.001056616,0.000771107,0.000514310,0.000313509,0.000174657,0.000088928,0.000041381,0.000017599,
				0.000008961,0.000021070,0.000045278,0.000088928,0.000159625,0.000261864,0.000392614,0.000537983,0.000673728,0.000771107,0.000806599,0.000771107,0.000673728,0.000537983,0.000392614,0.000261864,0.000159625,0.000088928,0.000045278,0.000021070,0.000008961,
				0.000004170,0.000009804,0.000021070,0.000041381,0.000074279,0.000121854,0.000182697,0.000250342,0.000313509,0.000358822,0.000375338,0.000358822,0.000313509,0.000250342,0.000182697,0.000121854,0.000074279,0.000041381,0.000021070,0.000009804,0.000004170,
				0.000001773,0.000004170,0.000008961,0.000017599,0.000031590,0.000051823,0.000077698,0.000106466,0.000133330,0.000152601,0.000159625,0.000152601,0.000133330,0.000106466,0.000077698,0.000051823,0.000031590,0.000017599,0.000008961,0.000004170,0.000001773 };

			v2f vert (appdata v)
			{
				v2f o;
				o.vertex = mul(UNITY_MATRIX_MVP, v.vertex);
				o.uv = TRANSFORM_TEX(v.uv, _MainTex);
				//UNITY_TRANSFER_FOG(o,o.vertex);
				return o;
			}

			
			
			//
			// Original method
			//
			fixed4 frag (v2f i)// : SV_Target
			{
				// sample the texture
				fixed4 col = tex2D(_MainTex, i.uv);
				col *= _MainColor;
				// apply fog
				//UNITY_APPLY_FOG(i.fogCoord, col);
				return col;
				//return fixed4(1, 0, 0, 1);
			}

			//
			// Gussian blur(radius:1)
			//
			fixed4 frag_Gussianblur_1(v2f i)// : SV_Target
			{
				fixed4 finalColor = tex2D(_MainTex, i.uv);
				finalColor.rgb = 0.0f; // Zero final color

				

				int n = 0;
				for (int j = -1; j <= 1; j++) {
					for (int k = -1; k <= 1; k++, n++) {
						float2 uv = i.uv + float2(j, k) * _MainTex_TexelSize.xy;
						fixed4 texColor = tex2D(_MainTex, uv);

						finalColor.rgb += gussian1[n] * texColor.rgb;
					}
				}
				
				finalColor *= _MainColor;

				return finalColor;

				//return tex2D(_MainTex, i.uv + texelCoord1[4] * (1.0f / _MainTex_TexelSize.xy));
				//return tex2D(_MainTex, i.uv + texelCoord1[4] * _MainTex_TexelSize.xy);
				//return fixed4(1,0,0,1);
			}

			//
			// Gussian blur(radius:2)
			//
			fixed4 frag_Gussianblur_2(v2f i)// : SV_Target
			{
				fixed4 finalColor = tex2D(_MainTex, i.uv);
				finalColor.rgb = 0.0f; // Zero final color



				int n = 0;
				for (int j = -2; j <= 2; j++) {
					for (int k = -2; k <= 2; k++, n++) {
						float2 uv = i.uv + float2(j, k) * _MainTex_TexelSize.xy;
						fixed4 texColor = tex2D(_MainTex, uv);

						finalColor.rgb += gussian2[n] * texColor.rgb;
					}
				}

				finalColor *= _MainColor;

				return finalColor;

				//return tex2D(_MainTex, i.uv + texelCoord1[4] * (1.0f / _MainTex_TexelSize.xy));
				//return tex2D(_MainTex, i.uv + texelCoord1[4] * _MainTex_TexelSize.xy);
				//return fixed4(1,0,0,1);
			}

			//
			// Gussian blur(radius:5)
			//
			fixed4 frag_Gussianblur_5(v2f i)// : SV_Target
			{
				fixed4 finalColor = tex2D(_MainTex, i.uv);
				finalColor.rgb = 0.0f; // Zero final color


				int n = 0;
				for (int j = -5; j <= 5; j++) {
					for (int k = -5; k <= 5; k++, n++) {
						float2 uv = i.uv + float2(j, k) * _MainTex_TexelSize.xy;
						fixed4 texColor = tex2D(_MainTex, uv);
						
						finalColor.rgb += gussian5[n] * texColor.rgb;
					}
				}

				finalColor *= _MainColor;

				return finalColor;

				//return tex2D(_MainTex, i.uv + texelCoord1[4] * (1.0f / _MainTex_TexelSize.xy));
				//return tex2D(_MainTex, i.uv + texelCoord1[4] * _MainTex_TexelSize.xy);
				//return fixed4(1,0,0,1);
			}


			//
			// Gussian blur(radius:10)
			//
			fixed4 frag_Gussianblur_10(v2f i)// : SV_Target
			{
				fixed4 finalColor = tex2D(_MainTex, i.uv);
				finalColor.rgb = 0.0f; // Zero final color


				int n = 0;
				for (int j = -10; j <= 10; j++) {
					for (int k = -10; k <= 10; k++, n++) {
						float2 uv = i.uv + float2(j, k) * _MainTex_TexelSize.xy;
						fixed4 texColor = tex2D(_MainTex, uv);

						finalColor.rgb += gussian10[n] * texColor.rgb;
					}
				}

				finalColor *= _MainColor;

				return finalColor;

				//return tex2D(_MainTex, i.uv + texelCoord1[4] * (1.0f / _MainTex_TexelSize.xy));
				//return tex2D(_MainTex, i.uv + texelCoord1[4] * _MainTex_TexelSize.xy);
				//return fixed4(1,0,0,1);
			}


			//
			// fragment accessor
			//
			fixed4 frag_accessor(v2f i) : SV_Target
			{
				if (_PassID >= 5.0f) {
					return frag_Gussianblur_10(i);
				}
				else if (_PassID >= 3.0f && _PassID < 5.0f) {
					return frag_Gussianblur_5(i);
				}
				else if (_PassID >= 2.0f && _PassID < 3.0f) {
					return frag_Gussianblur_2(i);
				}
				else if (_PassID >= 1.0f && _PassID < 2.0f) {
					return frag_Gussianblur_1(i);
				}
				else if (_PassID >= 0.0f && _PassID < 1.0f) {
					return frag(i);
				}
				else {
					return frag(i);
				}
			}

			ENDCG
		}
	}
}
